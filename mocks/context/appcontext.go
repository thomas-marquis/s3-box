// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/ui/app/context (interfaces: AppContext)
//
// Generated by this command:
//
//	mockgen -package mocks_appcontext -destination mocks/context/appcontext.go github.com/thomas-marquis/s3-box/internal/ui/app/context AppContext
//

// Package mocks_appcontext is a generated GoMock package.
package mocks_appcontext

import (
	reflect "reflect"

	fyne "fyne.io/fyne/v2"
	navigation "github.com/thomas-marquis/s3-box/internal/ui/app/navigation"
	viewmodel "github.com/thomas-marquis/s3-box/internal/ui/viewmodel"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockAppContext is a mock of AppContext interface.
type MockAppContext struct {
	ctrl     *gomock.Controller
	recorder *MockAppContextMockRecorder
	isgomock struct{}
}

// MockAppContextMockRecorder is the mock recorder for MockAppContext.
type MockAppContextMockRecorder struct {
	mock *MockAppContext
}

// NewMockAppContext creates a new mock instance.
func NewMockAppContext(ctrl *gomock.Controller) *MockAppContext {
	mock := &MockAppContext{ctrl: ctrl}
	mock.recorder = &MockAppContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppContext) EXPECT() *MockAppContextMockRecorder {
	return m.recorder
}

// ConnectionViewModel mocks base method.
func (m *MockAppContext) ConnectionViewModel() viewmodel.ConnectionViewModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionViewModel")
	ret0, _ := ret[0].(viewmodel.ConnectionViewModel)
	return ret0
}

// ConnectionViewModel indicates an expected call of ConnectionViewModel.
func (mr *MockAppContextMockRecorder) ConnectionViewModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionViewModel", reflect.TypeOf((*MockAppContext)(nil).ConnectionViewModel))
}

// CurrentRoute mocks base method.
func (m *MockAppContext) CurrentRoute() navigation.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRoute")
	ret0, _ := ret[0].(navigation.Route)
	return ret0
}

// CurrentRoute indicates an expected call of CurrentRoute.
func (mr *MockAppContextMockRecorder) CurrentRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRoute", reflect.TypeOf((*MockAppContext)(nil).CurrentRoute))
}

// ExitChan mocks base method.
func (m *MockAppContext) ExitChan() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitChan")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// ExitChan indicates an expected call of ExitChan.
func (mr *MockAppContextMockRecorder) ExitChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitChan", reflect.TypeOf((*MockAppContext)(nil).ExitChan))
}

// ExplorerViewModel mocks base method.
func (m *MockAppContext) ExplorerViewModel() viewmodel.ExplorerViewModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExplorerViewModel")
	ret0, _ := ret[0].(viewmodel.ExplorerViewModel)
	return ret0
}

// ExplorerViewModel indicates an expected call of ExplorerViewModel.
func (mr *MockAppContextMockRecorder) ExplorerViewModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExplorerViewModel", reflect.TypeOf((*MockAppContext)(nil).ExplorerViewModel))
}

// FyneSettings mocks base method.
func (m *MockAppContext) FyneSettings() fyne.Settings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FyneSettings")
	ret0, _ := ret[0].(fyne.Settings)
	return ret0
}

// FyneSettings indicates an expected call of FyneSettings.
func (mr *MockAppContextMockRecorder) FyneSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FyneSettings", reflect.TypeOf((*MockAppContext)(nil).FyneSettings))
}

// L mocks base method.
func (m *MockAppContext) L() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// L indicates an expected call of L.
func (mr *MockAppContextMockRecorder) L() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L", reflect.TypeOf((*MockAppContext)(nil).L))
}

// Navigate mocks base method.
func (m *MockAppContext) Navigate(route navigation.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Navigate", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// Navigate indicates an expected call of Navigate.
func (mr *MockAppContextMockRecorder) Navigate(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Navigate", reflect.TypeOf((*MockAppContext)(nil).Navigate), route)
}

// SettingsViewModel mocks base method.
func (m *MockAppContext) SettingsViewModel() viewmodel.SettingsViewModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsViewModel")
	ret0, _ := ret[0].(viewmodel.SettingsViewModel)
	return ret0
}

// SettingsViewModel indicates an expected call of SettingsViewModel.
func (mr *MockAppContextMockRecorder) SettingsViewModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsViewModel", reflect.TypeOf((*MockAppContext)(nil).SettingsViewModel))
}

// Window mocks base method.
func (m *MockAppContext) Window() fyne.Window {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Window")
	ret0, _ := ret[0].(fyne.Window)
	return ret0
}

// Window indicates an expected call of Window.
func (mr *MockAppContextMockRecorder) Window() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Window", reflect.TypeOf((*MockAppContext)(nil).Window))
}
