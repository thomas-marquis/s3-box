// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/ui/app/context (interfaces: AppContext)
//
// Generated by this command:
//
//	mockgen -package mocks_appcontext -destination mocks/context/appcontext.go github.com/thomas-marquis/s3-box/internal/ui/app/context AppContext
//

// Package mocks_appcontext is a generated GoMock package.
package mocks_appcontext

import (
	reflect "reflect"

	fyne "fyne.io/fyne/v2"
	navigation "github.com/thomas-marquis/s3-box/internal/ui/app/navigation"
	viewmodel "github.com/thomas-marquis/s3-box/internal/ui/viewmodel"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockAppContext is a mock of AppContext interface.
type MockAppContext struct {
	ctrl     *gomock.Controller
	recorder *MockAppContextMockRecorder
}

// MockAppContextMockRecorder is the mock recorder for MockAppContext.
type MockAppContextMockRecorder struct {
	mock *MockAppContext
}

// NewMockAppContext creates a new mock instance.
func NewMockAppContext(ctrl *gomock.Controller) *MockAppContext {
	mock := &MockAppContext{ctrl: ctrl}
	mock.recorder = &MockAppContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppContext) EXPECT() *MockAppContextMockRecorder {
	return m.recorder
}

// CurrentRoute mocks base method.
func (m *MockAppContext) CurrentRoute() navigation.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRoute")
	ret0, _ := ret[0].(navigation.Route)
	return ret0
}

// CurrentRoute indicates an expected call of CurrentRoute.
func (mr *MockAppContextMockRecorder) CurrentRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRoute", reflect.TypeOf((*MockAppContext)(nil).CurrentRoute))
}

// ExitChan mocks base method.
func (m *MockAppContext) ExitChan() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitChan")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// ExitChan indicates an expected call of ExitChan.
func (mr *MockAppContextMockRecorder) ExitChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitChan", reflect.TypeOf((*MockAppContext)(nil).ExitChan))
}

// L mocks base method.
func (m *MockAppContext) L() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// L indicates an expected call of L.
func (mr *MockAppContextMockRecorder) L() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L", reflect.TypeOf((*MockAppContext)(nil).L))
}

// Navigate mocks base method.
func (m *MockAppContext) Navigate(arg0 navigation.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Navigate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Navigate indicates an expected call of Navigate.
func (mr *MockAppContextMockRecorder) Navigate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Navigate", reflect.TypeOf((*MockAppContext)(nil).Navigate), arg0)
}

// Vm mocks base method.
func (m *MockAppContext) Vm() *viewmodel.ExplorerViewModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vm")
	ret0, _ := ret[0].(*viewmodel.ExplorerViewModel)
	return ret0
}

// Vm indicates an expected call of Vm.
func (mr *MockAppContextMockRecorder) Vm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vm", reflect.TypeOf((*MockAppContext)(nil).Vm))
}

// W mocks base method.
func (m *MockAppContext) W() fyne.Window {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "W")
	ret0, _ := ret[0].(fyne.Window)
	return ret0
}

// W indicates an expected call of W.
func (mr *MockAppContextMockRecorder) W() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "W", reflect.TypeOf((*MockAppContext)(nil).W))
}
