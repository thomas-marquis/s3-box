// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/ui/viewmodel (interfaces: ConnectionViewModel)
//
// Generated by this command:
//
//	mockgen -package mocks_viewmodel -destination mocks/viewmodel/connection_viewmodel.go github.com/thomas-marquis/s3-box/internal/ui/viewmodel ConnectionViewModel
//

// Package mocks_viewmodel is a generated GoMock package.
package mocks_viewmodel

import (
	reflect "reflect"

	binding "fyne.io/fyne/v2/data/binding"
	connection "github.com/thomas-marquis/s3-box/internal/connection"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionViewModel is a mock of ConnectionViewModel interface.
type MockConnectionViewModel struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionViewModelMockRecorder
	isgomock struct{}
}

// MockConnectionViewModelMockRecorder is the mock recorder for MockConnectionViewModel.
type MockConnectionViewModelMockRecorder struct {
	mock *MockConnectionViewModel
}

// NewMockConnectionViewModel creates a new mock instance.
func NewMockConnectionViewModel(ctrl *gomock.Controller) *MockConnectionViewModel {
	mock := &MockConnectionViewModel{ctrl: ctrl}
	mock.recorder = &MockConnectionViewModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionViewModel) EXPECT() *MockConnectionViewModelMockRecorder {
	return m.recorder
}

// Connections mocks base method.
func (m *MockConnectionViewModel) Connections() binding.UntypedList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connections")
	ret0, _ := ret[0].(binding.UntypedList)
	return ret0
}

// Connections indicates an expected call of Connections.
func (mr *MockConnectionViewModelMockRecorder) Connections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connections", reflect.TypeOf((*MockConnectionViewModel)(nil).Connections))
}

// DeleteConnection mocks base method.
func (m *MockConnectionViewModel) DeleteConnection(c *connection.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockConnectionViewModelMockRecorder) DeleteConnection(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockConnectionViewModel)(nil).DeleteConnection), c)
}

// ExportConnectionsAsJSON mocks base method.
func (m *MockConnectionViewModel) ExportConnectionsAsJSON() (connection.ConnectionExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportConnectionsAsJSON")
	ret0, _ := ret[0].(connection.ConnectionExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportConnectionsAsJSON indicates an expected call of ExportConnectionsAsJSON.
func (mr *MockConnectionViewModelMockRecorder) ExportConnectionsAsJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportConnectionsAsJSON", reflect.TypeOf((*MockConnectionViewModel)(nil).ExportConnectionsAsJSON))
}

// IsReadOnly mocks base method.
func (m *MockConnectionViewModel) IsReadOnly() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadOnly indicates an expected call of IsReadOnly.
func (mr *MockConnectionViewModelMockRecorder) IsReadOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadOnly", reflect.TypeOf((*MockConnectionViewModel)(nil).IsReadOnly))
}

// RefreshConnections mocks base method.
func (m *MockConnectionViewModel) RefreshConnections() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshConnections")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshConnections indicates an expected call of RefreshConnections.
func (mr *MockConnectionViewModelMockRecorder) RefreshConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshConnections", reflect.TypeOf((*MockConnectionViewModel)(nil).RefreshConnections))
}

// SaveConnection mocks base method.
func (m *MockConnectionViewModel) SaveConnection(c *connection.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConnection", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConnection indicates an expected call of SaveConnection.
func (mr *MockConnectionViewModelMockRecorder) SaveConnection(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConnection", reflect.TypeOf((*MockConnectionViewModel)(nil).SaveConnection), c)
}

// SelectConnection mocks base method.
func (m *MockConnectionViewModel) SelectConnection(c *connection.Connection) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectConnection", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectConnection indicates an expected call of SelectConnection.
func (mr *MockConnectionViewModelMockRecorder) SelectConnection(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectConnection", reflect.TypeOf((*MockConnectionViewModel)(nil).SelectConnection), c)
}
