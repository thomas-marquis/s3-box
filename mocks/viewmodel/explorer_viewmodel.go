// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/ui/viewmodel (interfaces: ExplorerViewModel)
//
// Generated by this command:
//
//	mockgen -package mocks_viewmodel -destination mocks/viewmodel/explorer_viewmodel.go github.com/thomas-marquis/s3-box/internal/ui/viewmodel ExplorerViewModel
//

// Package mocks_viewmodel is a generated GoMock package.
package mocks_viewmodel

import (
	reflect "reflect"

	fyne "fyne.io/fyne/v2"
	binding "fyne.io/fyne/v2/data/binding"
	explorer "github.com/thomas-marquis/s3-box/internal/explorer"
	gomock "go.uber.org/mock/gomock"
)

// MockExplorerViewModel is a mock of ExplorerViewModel interface.
type MockExplorerViewModel struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerViewModelMockRecorder
	isgomock struct{}
}

// MockExplorerViewModelMockRecorder is the mock recorder for MockExplorerViewModel.
type MockExplorerViewModelMockRecorder struct {
	mock *MockExplorerViewModel
}

// NewMockExplorerViewModel creates a new mock instance.
func NewMockExplorerViewModel(ctrl *gomock.Controller) *MockExplorerViewModel {
	mock := &MockExplorerViewModel{ctrl: ctrl}
	mock.recorder = &MockExplorerViewModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplorerViewModel) EXPECT() *MockExplorerViewModelMockRecorder {
	return m.recorder
}

// AppendDirToTree mocks base method.
func (m *MockExplorerViewModel) AppendDirToTree(dirID explorer.S3DirectoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendDirToTree", dirID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendDirToTree indicates an expected call of AppendDirToTree.
func (mr *MockExplorerViewModelMockRecorder) AppendDirToTree(dirID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendDirToTree", reflect.TypeOf((*MockExplorerViewModel)(nil).AppendDirToTree), dirID)
}

// CreateEmptyDirectory mocks base method.
func (m *MockExplorerViewModel) CreateEmptyDirectory(parent *explorer.S3Directory, name string) (*explorer.S3Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmptyDirectory", parent, name)
	ret0, _ := ret[0].(*explorer.S3Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmptyDirectory indicates an expected call of CreateEmptyDirectory.
func (mr *MockExplorerViewModelMockRecorder) CreateEmptyDirectory(parent, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyDirectory", reflect.TypeOf((*MockExplorerViewModel)(nil).CreateEmptyDirectory), parent, name)
}

// DeleteFile mocks base method.
func (m *MockExplorerViewModel) DeleteFile(file *explorer.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockExplorerViewModelMockRecorder) DeleteFile(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockExplorerViewModel)(nil).DeleteFile), file)
}

// DownloadFile mocks base method.
func (m *MockExplorerViewModel) DownloadFile(f *explorer.S3File, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", f, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockExplorerViewModelMockRecorder) DownloadFile(f, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockExplorerViewModel)(nil).DownloadFile), f, dest)
}

// ErrorChan mocks base method.
func (m *MockExplorerViewModel) ErrorChan() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorChan")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// ErrorChan indicates an expected call of ErrorChan.
func (mr *MockExplorerViewModelMockRecorder) ErrorChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorChan", reflect.TypeOf((*MockExplorerViewModel)(nil).ErrorChan))
}

// GetDirByID mocks base method.
func (m *MockExplorerViewModel) GetDirByID(dirID explorer.S3DirectoryID) (*explorer.S3Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirByID", dirID)
	ret0, _ := ret[0].(*explorer.S3Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirByID indicates an expected call of GetDirByID.
func (mr *MockExplorerViewModelMockRecorder) GetDirByID(dirID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirByID", reflect.TypeOf((*MockExplorerViewModel)(nil).GetDirByID), dirID)
}

// GetFileByID mocks base method.
func (m *MockExplorerViewModel) GetFileByID(fileID explorer.S3FileID) (*explorer.S3File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", fileID)
	ret0, _ := ret[0].(*explorer.S3File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockExplorerViewModelMockRecorder) GetFileByID(fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockExplorerViewModel)(nil).GetFileByID), fileID)
}

// GetLastSaveDir mocks base method.
func (m *MockExplorerViewModel) GetLastSaveDir() fyne.ListableURI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSaveDir")
	ret0, _ := ret[0].(fyne.ListableURI)
	return ret0
}

// GetLastSaveDir indicates an expected call of GetLastSaveDir.
func (mr *MockExplorerViewModelMockRecorder) GetLastSaveDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSaveDir", reflect.TypeOf((*MockExplorerViewModel)(nil).GetLastSaveDir))
}

// GetLastUploadDir mocks base method.
func (m *MockExplorerViewModel) GetLastUploadDir() fyne.ListableURI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUploadDir")
	ret0, _ := ret[0].(fyne.ListableURI)
	return ret0
}

// GetLastUploadDir indicates an expected call of GetLastUploadDir.
func (mr *MockExplorerViewModelMockRecorder) GetLastUploadDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUploadDir", reflect.TypeOf((*MockExplorerViewModel)(nil).GetLastUploadDir))
}

// GetMaxFileSizePreview mocks base method.
func (m *MockExplorerViewModel) GetMaxFileSizePreview() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFileSizePreview")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMaxFileSizePreview indicates an expected call of GetMaxFileSizePreview.
func (mr *MockExplorerViewModelMockRecorder) GetMaxFileSizePreview() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFileSizePreview", reflect.TypeOf((*MockExplorerViewModel)(nil).GetMaxFileSizePreview))
}

// Loading mocks base method.
func (m *MockExplorerViewModel) Loading() binding.Bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loading")
	ret0, _ := ret[0].(binding.Bool)
	return ret0
}

// Loading indicates an expected call of Loading.
func (mr *MockExplorerViewModelMockRecorder) Loading() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loading", reflect.TypeOf((*MockExplorerViewModel)(nil).Loading))
}

// OnDisplayNoConnectionBannerChange mocks base method.
func (m *MockExplorerViewModel) OnDisplayNoConnectionBannerChange(fn func(bool)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDisplayNoConnectionBannerChange", fn)
}

// OnDisplayNoConnectionBannerChange indicates an expected call of OnDisplayNoConnectionBannerChange.
func (mr *MockExplorerViewModelMockRecorder) OnDisplayNoConnectionBannerChange(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDisplayNoConnectionBannerChange", reflect.TypeOf((*MockExplorerViewModel)(nil).OnDisplayNoConnectionBannerChange), fn)
}

// PreviewFile mocks base method.
func (m *MockExplorerViewModel) PreviewFile(f *explorer.S3File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewFile", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewFile indicates an expected call of PreviewFile.
func (mr *MockExplorerViewModelMockRecorder) PreviewFile(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewFile", reflect.TypeOf((*MockExplorerViewModel)(nil).PreviewFile), f)
}

// RefreshDir mocks base method.
func (m *MockExplorerViewModel) RefreshDir(dirID explorer.S3DirectoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshDir", dirID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshDir indicates an expected call of RefreshDir.
func (mr *MockExplorerViewModelMockRecorder) RefreshDir(dirID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDir", reflect.TypeOf((*MockExplorerViewModel)(nil).RefreshDir), dirID)
}

// RemoveDirToTree mocks base method.
func (m *MockExplorerViewModel) RemoveDirToTree(dirID explorer.S3DirectoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDirToTree", dirID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDirToTree indicates an expected call of RemoveDirToTree.
func (mr *MockExplorerViewModelMockRecorder) RemoveDirToTree(dirID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDirToTree", reflect.TypeOf((*MockExplorerViewModel)(nil).RemoveDirToTree), dirID)
}

// ResetTree mocks base method.
func (m *MockExplorerViewModel) ResetTree() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetTree")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetTree indicates an expected call of ResetTree.
func (mr *MockExplorerViewModelMockRecorder) ResetTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetTree", reflect.TypeOf((*MockExplorerViewModel)(nil).ResetTree))
}

// SetLastSaveDir mocks base method.
func (m *MockExplorerViewModel) SetLastSaveDir(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastSaveDir", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastSaveDir indicates an expected call of SetLastSaveDir.
func (mr *MockExplorerViewModelMockRecorder) SetLastSaveDir(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSaveDir", reflect.TypeOf((*MockExplorerViewModel)(nil).SetLastSaveDir), filePath)
}

// SetLastUploadDir mocks base method.
func (m *MockExplorerViewModel) SetLastUploadDir(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastUploadDir", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastUploadDir indicates an expected call of SetLastUploadDir.
func (mr *MockExplorerViewModelMockRecorder) SetLastUploadDir(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastUploadDir", reflect.TypeOf((*MockExplorerViewModel)(nil).SetLastUploadDir), filePath)
}

// StartLoading mocks base method.
func (m *MockExplorerViewModel) StartLoading() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartLoading")
}

// StartLoading indicates an expected call of StartLoading.
func (mr *MockExplorerViewModelMockRecorder) StartLoading() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoading", reflect.TypeOf((*MockExplorerViewModel)(nil).StartLoading))
}

// StopLoading mocks base method.
func (m *MockExplorerViewModel) StopLoading() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopLoading")
}

// StopLoading indicates an expected call of StopLoading.
func (mr *MockExplorerViewModelMockRecorder) StopLoading() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLoading", reflect.TypeOf((*MockExplorerViewModel)(nil).StopLoading))
}

// Tree mocks base method.
func (m *MockExplorerViewModel) Tree() binding.UntypedTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tree")
	ret0, _ := ret[0].(binding.UntypedTree)
	return ret0
}

// Tree indicates an expected call of Tree.
func (mr *MockExplorerViewModelMockRecorder) Tree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tree", reflect.TypeOf((*MockExplorerViewModel)(nil).Tree))
}

// UploadFile mocks base method.
func (m *MockExplorerViewModel) UploadFile(localPath string, remoteDir *explorer.S3Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", localPath, remoteDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockExplorerViewModelMockRecorder) UploadFile(localPath, remoteDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockExplorerViewModel)(nil).UploadFile), localPath, remoteDir)
}
