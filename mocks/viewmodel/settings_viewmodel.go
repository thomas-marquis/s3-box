// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/ui/viewmodel (interfaces: SettingsViewModel)
//
// Generated by this command:
//
//	mockgen -package mocks_viewmodel -destination mocks/viewmodel/settings_viewmodel.go github.com/thomas-marquis/s3-box/internal/ui/viewmodel SettingsViewModel
//

// Package mocks_viewmodel is a generated GoMock package.
package mocks_viewmodel

import (
	reflect "reflect"
	time "time"

	binding "fyne.io/fyne/v2/data/binding"
	gomock "go.uber.org/mock/gomock"
)

// MockSettingsViewModel is a mock of SettingsViewModel interface.
type MockSettingsViewModel struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsViewModelMockRecorder
	isgomock struct{}
}

// MockSettingsViewModelMockRecorder is the mock recorder for MockSettingsViewModel.
type MockSettingsViewModelMockRecorder struct {
	mock *MockSettingsViewModel
}

// NewMockSettingsViewModel creates a new mock instance.
func NewMockSettingsViewModel(ctrl *gomock.Controller) *MockSettingsViewModel {
	mock := &MockSettingsViewModel{ctrl: ctrl}
	mock.recorder = &MockSettingsViewModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsViewModel) EXPECT() *MockSettingsViewModelMockRecorder {
	return m.recorder
}

// ColorTheme mocks base method.
func (m *MockSettingsViewModel) ColorTheme() binding.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColorTheme")
	ret0, _ := ret[0].(binding.String)
	return ret0
}

// ColorTheme indicates an expected call of ColorTheme.
func (mr *MockSettingsViewModelMockRecorder) ColorTheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColorTheme", reflect.TypeOf((*MockSettingsViewModel)(nil).ColorTheme))
}

// CurrentTimeout mocks base method.
func (m *MockSettingsViewModel) CurrentTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// CurrentTimeout indicates an expected call of CurrentTimeout.
func (mr *MockSettingsViewModelMockRecorder) CurrentTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTimeout", reflect.TypeOf((*MockSettingsViewModel)(nil).CurrentTimeout))
}

// MaxFilePreviewSizeMegaBytes mocks base method.
func (m *MockSettingsViewModel) MaxFilePreviewSizeMegaBytes() binding.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxFilePreviewSizeMegaBytes")
	ret0, _ := ret[0].(binding.Int)
	return ret0
}

// MaxFilePreviewSizeMegaBytes indicates an expected call of MaxFilePreviewSizeMegaBytes.
func (mr *MockSettingsViewModelMockRecorder) MaxFilePreviewSizeMegaBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxFilePreviewSizeMegaBytes", reflect.TypeOf((*MockSettingsViewModel)(nil).MaxFilePreviewSizeMegaBytes))
}

// Save mocks base method.
func (m *MockSettingsViewModel) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSettingsViewModelMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSettingsViewModel)(nil).Save))
}

// TimeoutInSeconds mocks base method.
func (m *MockSettingsViewModel) TimeoutInSeconds() binding.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeoutInSeconds")
	ret0, _ := ret[0].(binding.Int)
	return ret0
}

// TimeoutInSeconds indicates an expected call of TimeoutInSeconds.
func (mr *MockSettingsViewModelMockRecorder) TimeoutInSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutInSeconds", reflect.TypeOf((*MockSettingsViewModel)(nil).TimeoutInSeconds))
}
