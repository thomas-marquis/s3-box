// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/connection (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks_connection -destination mocks/connection/connection_repository.go github.com/thomas-marquis/s3-box/internal/connection Repository
//

// Package mocks_connection is a generated GoMock package.
package mocks_connection

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	connection "github.com/thomas-marquis/s3-box/internal/connection"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteConnection mocks base method.
func (m *MockRepository) DeleteConnection(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockRepositoryMockRecorder) DeleteConnection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockRepository)(nil).DeleteConnection), ctx, id)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id uuid.UUID) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// GetSelectedConnection mocks base method.
func (m *MockRepository) GetSelectedConnection(ctx context.Context) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedConnection", ctx)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedConnection indicates an expected call of GetSelectedConnection.
func (mr *MockRepositoryMockRecorder) GetSelectedConnection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedConnection", reflect.TypeOf((*MockRepository)(nil).GetSelectedConnection), ctx)
}

// ListConnections mocks base method.
func (m *MockRepository) ListConnections(ctx context.Context) ([]*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", ctx)
	ret0, _ := ret[0].([]*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections.
func (mr *MockRepositoryMockRecorder) ListConnections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockRepository)(nil).ListConnections), ctx)
}

// SaveConnection mocks base method.
func (m *MockRepository) SaveConnection(ctx context.Context, c *connection.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConnection", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConnection indicates an expected call of SaveConnection.
func (mr *MockRepositoryMockRecorder) SaveConnection(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConnection", reflect.TypeOf((*MockRepository)(nil).SaveConnection), ctx, c)
}

// SetSelectedConnection mocks base method.
func (m *MockRepository) SetSelectedConnection(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedConnection", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSelectedConnection indicates an expected call of SetSelectedConnection.
func (mr *MockRepositoryMockRecorder) SetSelectedConnection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedConnection", reflect.TypeOf((*MockRepository)(nil).SetSelectedConnection), ctx, id)
}
