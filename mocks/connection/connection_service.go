// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/connection (interfaces: ConnectionService)
//
// Generated by this command:
//
//	mockgen -package mocks_connection -destination mocks/connection/connection_service.go github.com/thomas-marquis/s3-box/internal/connection ConnectionService
//

// Package mocks_connection is a generated GoMock package.
package mocks_connection

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionService is a mock of ConnectionService interface.
type MockConnectionService struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionServiceMockRecorder
	isgomock struct{}
}

// MockConnectionServiceMockRecorder is the mock recorder for MockConnectionService.
type MockConnectionServiceMockRecorder struct {
	mock *MockConnectionService
}

// NewMockConnectionService creates a new mock instance.
func NewMockConnectionService(ctrl *gomock.Controller) *MockConnectionService {
	mock := &MockConnectionService{ctrl: ctrl}
	mock.recorder = &MockConnectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionService) EXPECT() *MockConnectionServiceMockRecorder {
	return m.recorder
}

// GetActiveConnectionID mocks base method.
func (m *MockConnectionService) GetActiveConnectionID(ctx context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveConnectionID", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveConnectionID indicates an expected call of GetActiveConnectionID.
func (mr *MockConnectionServiceMockRecorder) GetActiveConnectionID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveConnectionID", reflect.TypeOf((*MockConnectionService)(nil).GetActiveConnectionID), ctx)
}
