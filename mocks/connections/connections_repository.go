// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/connection (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks_connection -destination mocks/connection/connection_repository.go github.com/thomas-marquis/s3-box/internal/connection Repository
//

// Package mocks_connection is a generated GoMock package.
package mocks_connection

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	connection "github.com/thomas-marquis/s3-box/internal/connection"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// ExportToJson mocks base method.
func (m *MockRepository) ExportToJson(ctx context.Context) (connection.ConnectionExport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportToJson", ctx)
	ret0, _ := ret[0].(connection.ConnectionExport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportToJson indicates an expected call of ExportToJson.
func (mr *MockRepositoryMockRecorder) ExportToJson(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportToJson", reflect.TypeOf((*MockRepository)(nil).ExportToJson), ctx)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id uuid.UUID) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// GetSelected mocks base method.
func (m *MockRepository) GetSelected(ctx context.Context) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelected", ctx)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelected indicates an expected call of GetSelected.
func (mr *MockRepositoryMockRecorder) GetSelected(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelected", reflect.TypeOf((*MockRepository)(nil).GetSelected), ctx)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context) ([]*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, s *connection.Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, s)
}

// SetSelected mocks base method.
func (m *MockRepository) SetSelected(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelected", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSelected indicates an expected call of SetSelected.
func (mr *MockRepositoryMockRecorder) SetSelected(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelected", reflect.TypeOf((*MockRepository)(nil).SetSelected), ctx, id)
}
