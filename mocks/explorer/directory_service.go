// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/explorer (interfaces: DirectoryService)
//
// Generated by this command:
//
//	mockgen -package mocks_explorer -destination mocks/explorer/directory_service.go github.com/thomas-marquis/s3-box/internal/explorer DirectoryService
//

// Package mocks_explorer is a generated GoMock package.
package mocks_explorer

import (
	context "context"
	reflect "reflect"

	explorer "github.com/thomas-marquis/s3-box/internal/explorer"
	gomock "go.uber.org/mock/gomock"
)

// MockDirectoryService is a mock of DirectoryService interface.
type MockDirectoryService struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryServiceMockRecorder
	isgomock struct{}
}

// MockDirectoryServiceMockRecorder is the mock recorder for MockDirectoryService.
type MockDirectoryServiceMockRecorder struct {
	mock *MockDirectoryService
}

// NewMockDirectoryService creates a new mock instance.
func NewMockDirectoryService(ctrl *gomock.Controller) *MockDirectoryService {
	mock := &MockDirectoryService{ctrl: ctrl}
	mock.recorder = &MockDirectoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryService) EXPECT() *MockDirectoryServiceMockRecorder {
	return m.recorder
}

// CreateSubDirectory mocks base method.
func (m *MockDirectoryService) CreateSubDirectory(ctx context.Context, parent *explorer.S3Directory, name string) (*explorer.S3Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubDirectory", ctx, parent, name)
	ret0, _ := ret[0].(*explorer.S3Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubDirectory indicates an expected call of CreateSubDirectory.
func (mr *MockDirectoryServiceMockRecorder) CreateSubDirectory(ctx, parent, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubDirectory", reflect.TypeOf((*MockDirectoryService)(nil).CreateSubDirectory), ctx, parent, name)
}

// DeleteFile mocks base method.
func (m *MockDirectoryService) DeleteFile(ctx context.Context, dir *explorer.S3Directory, fileID explorer.S3FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, dir, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockDirectoryServiceMockRecorder) DeleteFile(ctx, dir, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockDirectoryService)(nil).DeleteFile), ctx, dir, fileID)
}

// GetDirectoryByID mocks base method.
func (m *MockDirectoryService) GetDirectoryByID(ctx context.Context, id explorer.S3DirectoryID) (*explorer.S3Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryByID", ctx, id)
	ret0, _ := ret[0].(*explorer.S3Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryByID indicates an expected call of GetDirectoryByID.
func (mr *MockDirectoryServiceMockRecorder) GetDirectoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryByID", reflect.TypeOf((*MockDirectoryService)(nil).GetDirectoryByID), ctx, id)
}

// GetRootDirectory mocks base method.
func (m *MockDirectoryService) GetRootDirectory(ctx context.Context) (*explorer.S3Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootDirectory", ctx)
	ret0, _ := ret[0].(*explorer.S3Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootDirectory indicates an expected call of GetRootDirectory.
func (mr *MockDirectoryServiceMockRecorder) GetRootDirectory(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootDirectory", reflect.TypeOf((*MockDirectoryService)(nil).GetRootDirectory), ctx)
}
