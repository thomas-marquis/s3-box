// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/explorer (interfaces: S3FileRepository)
//
// Generated by this command:
//
//	mockgen -package mocks_explorer -destination mocks/explorer/file_s3_repository.go github.com/thomas-marquis/s3-box/internal/explorer S3FileRepository
//

// Package mocks_explorer is a generated GoMock package.
package mocks_explorer

import (
	context "context"
	reflect "reflect"

	explorer "github.com/thomas-marquis/s3-box/internal/explorer"
	gomock "go.uber.org/mock/gomock"
)

// MockS3FileRepository is a mock of S3FileRepository interface.
type MockS3FileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockS3FileRepositoryMockRecorder
}

// MockS3FileRepositoryMockRecorder is the mock recorder for MockS3FileRepository.
type MockS3FileRepositoryMockRecorder struct {
	mock *MockS3FileRepository
}

// NewMockS3FileRepository creates a new mock instance.
func NewMockS3FileRepository(ctrl *gomock.Controller) *MockS3FileRepository {
	mock := &MockS3FileRepository{ctrl: ctrl}
	mock.recorder = &MockS3FileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3FileRepository) EXPECT() *MockS3FileRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockS3FileRepository) DeleteFile(arg0 context.Context, arg1 explorer.S3FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockS3FileRepositoryMockRecorder) DeleteFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockS3FileRepository)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockS3FileRepository) DownloadFile(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockS3FileRepositoryMockRecorder) DownloadFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockS3FileRepository)(nil).DownloadFile), arg0, arg1, arg2)
}

// GetContent mocks base method.
func (m *MockS3FileRepository) GetContent(arg0 context.Context, arg1 explorer.S3FileID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockS3FileRepositoryMockRecorder) GetContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockS3FileRepository)(nil).GetContent), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockS3FileRepository) UploadFile(arg0 context.Context, arg1 *explorer.LocalFile, arg2 *explorer.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockS3FileRepositoryMockRecorder) UploadFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockS3FileRepository)(nil).UploadFile), arg0, arg1, arg2)
}
