// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/explorer (interfaces: FileService)
//
// Generated by this command:
//
//	mockgen -package mocks_explorer -destination mocks/explorer/file_service.go github.com/thomas-marquis/s3-box/internal/explorer FileService
//

// Package mocks_explorer is a generated GoMock package.
package mocks_explorer

import (
	context "context"
	reflect "reflect"

	explorer "github.com/thomas-marquis/s3-box/internal/explorer"
	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
	isgomock struct{}
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockFileService) DownloadFile(ctx context.Context, file *explorer.S3File, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, file, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileServiceMockRecorder) DownloadFile(ctx, file, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileService)(nil).DownloadFile), ctx, file, dest)
}

// GetContent mocks base method.
func (m *MockFileService) GetContent(ctx context.Context, file *explorer.S3File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", ctx, file)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockFileServiceMockRecorder) GetContent(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockFileService)(nil).GetContent), ctx, file)
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, local *explorer.LocalFile, remote *explorer.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, local, remote)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, local, remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, local, remote)
}
