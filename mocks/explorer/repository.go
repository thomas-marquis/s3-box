// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/s3-box/internal/explorer (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks_explorer -destination mocks/explorer/repository.go github.com/thomas-marquis/s3-box/internal/explorer Repository
//

// Package mocks_explorer is a generated GoMock package.
package mocks_explorer

import (
	context "context"
	reflect "reflect"

	connection "github.com/thomas-marquis/s3-box/internal/connection"
	explorer "github.com/thomas-marquis/s3-box/internal/explorer"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockRepository) DeleteFile(arg0 context.Context, arg1 *explorer.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockRepositoryMockRecorder) DeleteFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockRepository)(nil).DeleteFile), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockRepository) DownloadFile(arg0 context.Context, arg1 *explorer.S3File, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockRepositoryMockRecorder) DownloadFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockRepository)(nil).DownloadFile), arg0, arg1, arg2)
}

// GetFileContent mocks base method.
func (m *MockRepository) GetFileContent(arg0 context.Context, arg1 *explorer.S3File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockRepositoryMockRecorder) GetFileContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockRepository)(nil).GetFileContent), arg0, arg1)
}

// ListDirectoryContent mocks base method.
func (m *MockRepository) ListDirectoryContent(arg0 context.Context, arg1 *explorer.S3Directory) ([]*explorer.S3Directory, []*explorer.S3File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoryContent", arg0, arg1)
	ret0, _ := ret[0].([]*explorer.S3Directory)
	ret1, _ := ret[1].([]*explorer.S3File)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDirectoryContent indicates an expected call of ListDirectoryContent.
func (mr *MockRepositoryMockRecorder) ListDirectoryContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryContent", reflect.TypeOf((*MockRepository)(nil).ListDirectoryContent), arg0, arg1)
}

// SetConnection mocks base method.
func (m *MockRepository) SetConnection(arg0 context.Context, arg1 *connection.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnection indicates an expected call of SetConnection.
func (mr *MockRepositoryMockRecorder) SetConnection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockRepository)(nil).SetConnection), arg0, arg1)
}

// UploadFile mocks base method.
func (m *MockRepository) UploadFile(arg0 context.Context, arg1 *explorer.LocalFile, arg2 *explorer.S3File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockRepositoryMockRecorder) UploadFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockRepository)(nil).UploadFile), arg0, arg1, arg2)
}
