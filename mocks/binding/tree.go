// Code generated by MockGen. DO NOT EDIT.
// Source: fyne.io/fyne/v2/data/binding (interfaces: UntypedTree)
//
// Generated by this command:
//
//	mockgen -package mocks_binding -destination mocks/binding/tree.go fyne.io/fyne/v2/data/binding UntypedTree
//

// Package mocks_binding is a generated GoMock package.
package mocks_binding

import (
	reflect "reflect"

	binding "fyne.io/fyne/v2/data/binding"
	gomock "go.uber.org/mock/gomock"
)

// MockUntypedTree is a mock of UntypedTree interface.
type MockUntypedTree struct {
	ctrl     *gomock.Controller
	recorder *MockUntypedTreeMockRecorder
	isgomock struct{}
}

// MockUntypedTreeMockRecorder is the mock recorder for MockUntypedTree.
type MockUntypedTreeMockRecorder struct {
	mock *MockUntypedTree
}

// NewMockUntypedTree creates a new mock instance.
func NewMockUntypedTree(ctrl *gomock.Controller) *MockUntypedTree {
	mock := &MockUntypedTree{ctrl: ctrl}
	mock.recorder = &MockUntypedTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUntypedTree) EXPECT() *MockUntypedTreeMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockUntypedTree) AddListener(arg0 binding.DataListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", arg0)
}

// AddListener indicates an expected call of AddListener.
func (mr *MockUntypedTreeMockRecorder) AddListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockUntypedTree)(nil).AddListener), arg0)
}

// Append mocks base method.
func (m *MockUntypedTree) Append(parent, id string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", parent, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockUntypedTreeMockRecorder) Append(parent, id, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockUntypedTree)(nil).Append), parent, id, value)
}

// ChildIDs mocks base method.
func (m *MockUntypedTree) ChildIDs(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildIDs", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ChildIDs indicates an expected call of ChildIDs.
func (mr *MockUntypedTreeMockRecorder) ChildIDs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildIDs", reflect.TypeOf((*MockUntypedTree)(nil).ChildIDs), arg0)
}

// Get mocks base method.
func (m *MockUntypedTree) Get() (map[string][]string, map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(map[string]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUntypedTreeMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUntypedTree)(nil).Get))
}

// GetItem mocks base method.
func (m *MockUntypedTree) GetItem(id string) (binding.DataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", id)
	ret0, _ := ret[0].(binding.DataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockUntypedTreeMockRecorder) GetItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockUntypedTree)(nil).GetItem), id)
}

// GetValue mocks base method.
func (m *MockUntypedTree) GetValue(id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockUntypedTreeMockRecorder) GetValue(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockUntypedTree)(nil).GetValue), id)
}

// Prepend mocks base method.
func (m *MockUntypedTree) Prepend(parent, id string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepend", parent, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepend indicates an expected call of Prepend.
func (mr *MockUntypedTreeMockRecorder) Prepend(parent, id, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepend", reflect.TypeOf((*MockUntypedTree)(nil).Prepend), parent, id, value)
}

// Remove mocks base method.
func (m *MockUntypedTree) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockUntypedTreeMockRecorder) Remove(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUntypedTree)(nil).Remove), id)
}

// RemoveListener mocks base method.
func (m *MockUntypedTree) RemoveListener(arg0 binding.DataListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", arg0)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockUntypedTreeMockRecorder) RemoveListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockUntypedTree)(nil).RemoveListener), arg0)
}

// Set mocks base method.
func (m *MockUntypedTree) Set(ids map[string][]string, values map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ids, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUntypedTreeMockRecorder) Set(ids, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUntypedTree)(nil).Set), ids, values)
}

// SetValue mocks base method.
func (m *MockUntypedTree) SetValue(id string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue.
func (mr *MockUntypedTreeMockRecorder) SetValue(id, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockUntypedTree)(nil).SetValue), id, value)
}
